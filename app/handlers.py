from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

import app.keyboards as kb
import app.requests as req
import app.utils as ut

router = Router()


ACCESS_PASSWORD = "e5ae93bd8095fbd86c25a110bbf194a5a1a209f1e8eb31bb30c8b0ecbe254d58"


class RegisterState(StatesGroup):
    waiting_for_password = State()


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await req.get_user_by_id(user_id)
    if user:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω—ã."
        )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.")
        await state.set_state(RegisterState.waiting_for_password)


@router.message(RegisterState.waiting_for_password)
async def password_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if ut.hash_password(message.text.strip()) == ACCESS_PASSWORD:
        await req.add_user(user_id, message.from_user.username or "")
        await message.answer(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø. "
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä—Å–æ–Ω—ã."
        )
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@router.message()
async def after_auth_person_search(message: Message):
    user = await req.get_user_by_id(message.from_user.id)
    if not user:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–≤–µ–¥–∏—Ç–µ /start.")
        return
    persons = await req.search_persons(message.text)
    if not persons:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    else:
        await message.answer("–í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:", reply_markup=await kb.persons_keyboard(persons))


@router.callback_query(F.data.startswith("person_"))
async def persons_callback_query(callback: CallbackQuery):
    person_id = int(callback.data.split("_")[1])
    person = await req.get_person(person_id)
    if not person:
        await callback.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    photo_info = (
        f"üñºÔ∏è –§–æ—Ç–æ: <a href='{person.photo_url}'>–°–º–æ—Ç—Ä–µ—Ç—å</a>"
        if person.photo_url
        else "üñºÔ∏è –§–æ—Ç–æ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    )
    main_info = (
        f"üë§ {person.first_name} {person.last_name} {person.father_name}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {person.birth_date.strftime('%d.%m.%Y') if person.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üíÄ –î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏: {person.death_date.strftime('%d.%m.%Y') if person.death_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"‚öß –ü–æ–ª: {person.gender if person.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {person.bio if person.bio else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"{photo_info}"
    )
    siblings = await req.get_siblings(person.first_name, person.last_name)
    siblings_info = ""
    if siblings:
        siblings_info = "\n\nüë®üë¶ –ë—Ä–∞—Ç—å—è/—Å–µ—Å—Ç—Ä—ã:\n" + "\n".join(
            [
                f"{sib['sibling_type']}: {sib['first_name']} {sib['last_name']} {sib['father_name']}"
                for sib in siblings
            ]
        )
    parents = await req.get_parents(person.first_name, person.last_name)
    parents_info = ""
    if parents:
        parents_info = "\n\nüë™ –†–æ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join(
            [f"{p['first_name']} {p['last_name']} {p['father_name']}" for p in parents]
        )
    spouses = await req.get_spouses(person.first_name, person.last_name)
    spouses_info = ""
    if spouses:
        spouses_info = "\n\nüë´ –°—É–ø—Ä—É–≥(–∞):\n" + "\n".join(
            [
                f"{s['spouse_type']}: {s['first_name']} {s['last_name']} {s['father_name']}"
                for s in spouses
            ]
        )
    children = await req.get_children(person.first_name, person.last_name)
    children_info = ""
    if children:
        children_info = "\n\nüë∂ –î–µ—Ç–∏:\n" + "\n".join(
            [
                f"{child['child_type']}: {child['first_name']} {child['last_name']} {child['father_name']}"
                for child in children
            ]
        )
    full_response = main_info + parents_info + siblings_info + spouses_info + children_info
    await callback.message.answer(full_response, parse_mode="HTML")
    await callback.answer()
